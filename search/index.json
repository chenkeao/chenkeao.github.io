[{"content":"Install nbconvert via pip\n▼ 1 pip install nbconvert Now, the command\n▼ 1 jupyter nbconvert --to pdf --template-file report filename.ipynb should work well, producing a document with a table of contents and properly formatted code blocks. However, an unnecessary counter appears before each code block, wasting space and serving no purpose. To remove it, a custom template is required.\nThe template consists of two files: assignment.tex.j2 and style_assignment.tex.j2, which are modified duplicates of existing files. Template files are located in share\\jupyter\\nbconvert\\templates\\latex. Duplicate report.tex.j2 and modify the second line to\n▼ 1 ((* set cell_style = \u0026#39;style_assignment.tex.j2\u0026#39; *)) The file style_assignment.tex.j2 is a duplicate of style_jupyter.tex.j2 with the line\n▼ 1 {\\ttfamily\\llap{{\\color{#2}[#3]:\\hspace{3pt}#4}}\\vspace{-\\baselineskip}} replaced by\n▼ 1 {\\ttfamily\\llap{{\\color{#2}\\hspace{3pt}#4}}} Moreover, in order to support Chinese, the code below should be added\n▼ 1 2 \\usepackage{xeCJK} \\setCJKmainfont{SimSun} Now that custom files are used, the command is\n▼ 1 jupyter nbconvert --to pdf --template-file assignment filename.ipynb The complete file is shown as follows:\nassignment.tex.j2 ▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 % Default to the notebook output style ((* if not cell_style is defined *)) ((* set cell_style = \u0026#39;style_assignment.tex.j2\u0026#39; *)) ((* endif *)) % Inherit from the specified cell style. ((* extends cell_style *)) %=============================================================================== % Latex Book %=============================================================================== ((* block predoc *)) ((( super() ))) ((* block tableofcontents *))\\tableofcontents((* endblock tableofcontents *)) ((* endblock predoc *)) ((* block docclass *)) \\documentclass{report} ((* endblock docclass *)) ((* block markdowncell scoped *)) ((( cell.source | citation2latex | strip_files_prefix | convert_pandoc(\u0026#39;markdown+tex_math_double_backslash\u0026#39;, \u0026#39;json\u0026#39;,extra_args=[]) | resolve_references | convert_pandoc(\u0026#39;json\u0026#39;,\u0026#39;latex\u0026#39;, extra_args=[\u0026#34;--top-level-division=chapter\u0026#34;]) ))) ((* endblock markdowncell *)) style_assignment.tex.j2 ▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 ((=- IPython input/output style -=)) ((*- extends \u0026#39;base.tex.j2\u0026#39; -*)) ((*- block packages -*)) \\usepackage{xeCJK} \\setCJKmainfont{SimSun} \\usepackage[breakable]{tcolorbox} \\usepackage{parskip} % Stop auto-indenting (to mimic markdown behaviour) ((( super() ))) ((*- endblock packages -*)) ((*- block definitions -*)) ((( super() ))) % Pygments definitions (((- resources.latex.pygments_definitions ))) % For linebreaks inside Verbatim environment from package fancyvrb. \\makeatletter \\newbox\\Wrappedcontinuationbox \\newbox\\Wrappedvisiblespacebox \\newcommand*\\Wrappedvisiblespace {\\textcolor{red}{\\textvisiblespace}} \\newcommand*\\Wrappedcontinuationsymbol {\\textcolor{red}{\\llap{\\tiny$\\m@th\\hookrightarrow$}}} \\newcommand*\\Wrappedcontinuationindent {3ex } \\newcommand*\\Wrappedafterbreak {\\kern\\Wrappedcontinuationindent\\copy\\Wrappedcontinuationbox} % Take advantage of the already applied Pygments mark-up to insert % potential linebreaks for TeX processing. % {, \u0026lt;, #, %, $, \u0026#39; and \u0026#34;: go to next line. % _, }, ^, \u0026amp;, \u0026gt;, - and ~: stay at end of broken line. % Use of \\textquotesingle for straight quote. \\newcommand*\\Wrappedbreaksatspecials {% \\def\\PYGZus{\\discretionary{\\char`\\_}{\\Wrappedafterbreak}{\\char`\\_}}% \\def\\PYGZob{\\discretionary{}{\\Wrappedafterbreak\\char`\\{}{\\char`\\{}}% \\def\\PYGZcb{\\discretionary{\\char`\\}}{\\Wrappedafterbreak}{\\char`\\}}}% \\def\\PYGZca{\\discretionary{\\char`\\^}{\\Wrappedafterbreak}{\\char`\\^}}% \\def\\PYGZam{\\discretionary{\\char`\\\u0026amp;}{\\Wrappedafterbreak}{\\char`\\\u0026amp;}}% \\def\\PYGZlt{\\discretionary{}{\\Wrappedafterbreak\\char`\\\u0026lt;}{\\char`\\\u0026lt;}}% \\def\\PYGZgt{\\discretionary{\\char`\\\u0026gt;}{\\Wrappedafterbreak}{\\char`\\\u0026gt;}}% \\def\\PYGZsh{\\discretionary{}{\\Wrappedafterbreak\\char`\\#}{\\char`\\#}}% \\def\\PYGZpc{\\discretionary{}{\\Wrappedafterbreak\\char`\\%}{\\char`\\%}}% \\def\\PYGZdl{\\discretionary{}{\\Wrappedafterbreak\\char`\\$}{\\char`\\$}}% \\def\\PYGZhy{\\discretionary{\\char`\\-}{\\Wrappedafterbreak}{\\char`\\-}}% \\def\\PYGZsq{\\discretionary{}{\\Wrappedafterbreak\\textquotesingle}{\\textquotesingle}}% \\def\\PYGZdq{\\discretionary{}{\\Wrappedafterbreak\\char`\\\u0026#34;}{\\char`\\\u0026#34;}}% \\def\\PYGZti{\\discretionary{\\char`\\~}{\\Wrappedafterbreak}{\\char`\\~}}% } % Some characters . , ; ? ! / are not pygmentized. % This macro makes them \u0026#34;active\u0026#34; and they will insert potential linebreaks \\newcommand*\\Wrappedbreaksatpunct {% \\lccode`\\~`\\.\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\.}}{\\Wrappedafterbreak}{\\hbox{\\char`\\.}}}% \\lccode`\\~`\\,\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\,}}{\\Wrappedafterbreak}{\\hbox{\\char`\\,}}}% \\lccode`\\~`\\;\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\;}}{\\Wrappedafterbreak}{\\hbox{\\char`\\;}}}% \\lccode`\\~`\\:\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\:}}{\\Wrappedafterbreak}{\\hbox{\\char`\\:}}}% \\lccode`\\~`\\?\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\?}}{\\Wrappedafterbreak}{\\hbox{\\char`\\?}}}% \\lccode`\\~`\\!\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\!}}{\\Wrappedafterbreak}{\\hbox{\\char`\\!}}}% \\lccode`\\~`\\/\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\/}}{\\Wrappedafterbreak}{\\hbox{\\char`\\/}}}% \\catcode`\\.\\active \\catcode`\\,\\active \\catcode`\\;\\active \\catcode`\\:\\active \\catcode`\\?\\active \\catcode`\\!\\active \\catcode`\\/\\active \\lccode`\\~`\\~ } \\makeatother \\let\\OriginalVerbatim=\\Verbatim \\makeatletter \\renewcommand{\\Verbatim}[1][1]{% %\\parskip\\z@skip \\sbox\\Wrappedcontinuationbox {\\Wrappedcontinuationsymbol}% \\sbox\\Wrappedvisiblespacebox {\\FV@SetupFont\\Wrappedvisiblespace}% \\def\\FancyVerbFormatLine ##1{\\hsize\\linewidth \\vtop{\\raggedright\\hyphenpenalty\\z@\\exhyphenpenalty\\z@ \\doublehyphendemerits\\z@\\finalhyphendemerits\\z@ \\strut ##1\\strut}% }% % If the linebreak is at a space, the latter will be displayed as visible % space at end of first line, and a continuation symbol starts next line. % Stretch/shrink are however usually zero for typewriter font. \\def\\FV@Space {% \\nobreak\\hskip\\z@ plus\\fontdimen3\\font minus\\fontdimen4\\font \\discretionary{\\copy\\Wrappedvisiblespacebox}{\\Wrappedafterbreak} {\\kern\\fontdimen2\\font}% }% % Allow breaks at special characters using \\PYG... macros. \\Wrappedbreaksatspecials % Breaks at punctuation characters . , ; ? ! and / need catcode=\\active \\OriginalVerbatim[#1,codes*=\\Wrappedbreaksatpunct]% } \\makeatother % Exact colors from NB ((*- block style_colors *)) \\definecolor{incolor}{HTML}{303F9F} \\definecolor{outcolor}{HTML}{D84315} \\definecolor{cellborder}{HTML}{CFCFCF} \\definecolor{cellbackground}{HTML}{F7F7F7} ((*- endblock style_colors *)) % prompt \\makeatletter \\newcommand{\\boxspacing}{\\kern\\kvtcb@left@rule\\kern\\kvtcb@boxsep} \\makeatother ((*- block style_prompt *)) \\newcommand{\\prompt}[4]{ {\\ttfamily\\llap{{\\color{#2}\\hspace{3pt}#4}}} } ((* endblock style_prompt *)) ((*- endblock definitions -*)) %=============================================================================== % Input %=============================================================================== ((* block input scoped *)) ((( draw_cell(cell.source | highlight_code(strip_verbatim=True), cell, \u0026#39;In\u0026#39;, \u0026#39;incolor\u0026#39;, \u0026#39;\\\\boxspacing\u0026#39;) ))) ((* endblock input *)) %=============================================================================== % Output %=============================================================================== ((*- if charlim is not defined -*)) ((* set charlim = 80 *)) ((*- endif -*)) ((* block execute_result scoped *)) ((*- for type in output.data | filter_data_type -*)) ((*- if type in [\u0026#39;text/plain\u0026#39;]*)) ((( draw_cell(output.data[\u0026#39;text/plain\u0026#39;] | wrap_text(charlim) | escape_latex | ansi2latex, cell, \u0026#39;Out\u0026#39;, \u0026#39;outcolor\u0026#39;, \u0026#39;\\\\boxspacing\u0026#39;) ))) ((* else -*)) ((( \u0026#34; \u0026#34; ))) ((( draw_prompt(cell, \u0026#39;Out\u0026#39;, \u0026#39;outcolor\u0026#39;,\u0026#39;\u0026#39;) )))((( super() ))) ((*- endif -*)) ((*- endfor -*)) ((* endblock execute_result *)) ((* block stream *)) \\begin{Verbatim}[commandchars=\\\\\\{\\}] ((( output.text | wrap_text(charlim) | escape_latex | strip_trailing_newline | ansi2latex ))) \\end{Verbatim} ((* endblock stream *)) %============================================================================== % Support Macros %============================================================================== % Name: draw_cell % Purpose: Renders an output/input prompt ((*- if draw_cell is not defined -*)) % Required to allow overriding. ((* macro draw_cell(text, cell, prompt, prompt_color, extra_space) -*)) ((*- if prompt == \u0026#39;In\u0026#39; -*)) ((*- set style = \u0026#34;breakable, size=fbox, boxrule=1pt, pad at break*=1mm,colback=cellbackground, colframe=cellborder\u0026#34;-*)) ((*- else -*))((*- set style = \u0026#34;breakable, size=fbox, boxrule=.5pt, pad at break*=1mm, opacityfill=0\u0026#34;-*))((*- endif -*)) \\begin{tcolorbox}[((( style )))] (((- draw_prompt(cell, prompt, prompt_color, extra_space) ))) \\begin{Verbatim}[commandchars=\\\\\\{\\}] ((( text ))) \\end{Verbatim} \\end{tcolorbox} ((*- endmacro *)) ((*- endif -*)) % Name: draw_prompt % Purpose: Renders an output/input prompt ((* macro draw_prompt(cell, prompt, prompt_color, extra_space) -*)) ((*- if cell.execution_count is defined -*)) ((*- set execution_count = \u0026#34;\u0026#34; ~ (cell.execution_count | replace(None, \u0026#34; \u0026#34;)) -*)) ((*- else -*))((*- set execution_count = \u0026#34; \u0026#34; -*))((*- endif *)) ((*- if (resources.global_content_filter.include_output_prompt and prompt == \u0026#39;Out\u0026#39;) or (resources.global_content_filter.include_input_prompt and prompt == \u0026#39;In\u0026#39; ) *)) \\prompt{(((prompt)))}{(((prompt_color)))}{(((execution_count)))}{(((extra_space)))} ((*- endif -*)) ((*- endmacro *)) Furthermore, if you want to hide code:\n▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 ((=- IPython input/output style -=)) ((*- extends \u0026#39;base.tex.j2\u0026#39; -*)) ((*- block packages -*)) \\usepackage{xeCJK} \\setCJKmainfont{SimSun} \\usepackage[breakable]{tcolorbox} \\usepackage{parskip} % Stop auto-indenting (to mimic markdown behaviour) ((( super() ))) ((*- endblock packages -*)) ((*- block definitions -*)) ((( super() ))) % Pygments definitions (((- resources.latex.pygments_definitions ))) % For linebreaks inside Verbatim environment from package fancyvrb. \\makeatletter \\newbox\\Wrappedcontinuationbox \\newbox\\Wrappedvisiblespacebox \\newcommand*\\Wrappedvisiblespace {\\textcolor{red}{\\textvisiblespace}} \\newcommand*\\Wrappedcontinuationsymbol {\\textcolor{red}{\\llap{\\tiny$\\m@th\\hookrightarrow$}}} \\newcommand*\\Wrappedcontinuationindent {3ex } \\newcommand*\\Wrappedafterbreak {\\kern\\Wrappedcontinuationindent\\copy\\Wrappedcontinuationbox} % Take advantage of the already applied Pygments mark-up to insert % potential linebreaks for TeX processing. % {, \u0026lt;, #, %, $, \u0026#39; and \u0026#34;: go to next line. % _, }, ^, \u0026amp;, \u0026gt;, - and ~: stay at end of broken line. % Use of \\textquotesingle for straight quote. \\newcommand*\\Wrappedbreaksatspecials {% \\def\\PYGZus{\\discretionary{\\char`\\_}{\\Wrappedafterbreak}{\\char`\\_}}% \\def\\PYGZob{\\discretionary{}{\\Wrappedafterbreak\\char`\\{}{\\char`\\{}}% \\def\\PYGZcb{\\discretionary{\\char`\\}}{\\Wrappedafterbreak}{\\char`\\}}}% \\def\\PYGZca{\\discretionary{\\char`\\^}{\\Wrappedafterbreak}{\\char`\\^}}% \\def\\PYGZam{\\discretionary{\\char`\\\u0026amp;}{\\Wrappedafterbreak}{\\char`\\\u0026amp;}}% \\def\\PYGZlt{\\discretionary{}{\\Wrappedafterbreak\\char`\\\u0026lt;}{\\char`\\\u0026lt;}}% \\def\\PYGZgt{\\discretionary{\\char`\\\u0026gt;}{\\Wrappedafterbreak}{\\char`\\\u0026gt;}}% \\def\\PYGZsh{\\discretionary{}{\\Wrappedafterbreak\\char`\\#}{\\char`\\#}}% \\def\\PYGZpc{\\discretionary{}{\\Wrappedafterbreak\\char`\\%}{\\char`\\%}}% \\def\\PYGZdl{\\discretionary{}{\\Wrappedafterbreak\\char`\\$}{\\char`\\$}}% \\def\\PYGZhy{\\discretionary{\\char`\\-}{\\Wrappedafterbreak}{\\char`\\-}}% \\def\\PYGZsq{\\discretionary{}{\\Wrappedafterbreak\\textquotesingle}{\\textquotesingle}}% \\def\\PYGZdq{\\discretionary{}{\\Wrappedafterbreak\\char`\\\u0026#34;}{\\char`\\\u0026#34;}}% \\def\\PYGZti{\\discretionary{\\char`\\~}{\\Wrappedafterbreak}{\\char`\\~}}% } % Some characters . , ; ? ! / are not pygmentized. % This macro makes them \u0026#34;active\u0026#34; and they will insert potential linebreaks \\newcommand*\\Wrappedbreaksatpunct {% \\lccode`\\~`\\.\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\.}}{\\Wrappedafterbreak}{\\hbox{\\char`\\.}}}% \\lccode`\\~`\\,\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\,}}{\\Wrappedafterbreak}{\\hbox{\\char`\\,}}}% \\lccode`\\~`\\;\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\;}}{\\Wrappedafterbreak}{\\hbox{\\char`\\;}}}% \\lccode`\\~`\\:\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\:}}{\\Wrappedafterbreak}{\\hbox{\\char`\\:}}}% \\lccode`\\~`\\?\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\?}}{\\Wrappedafterbreak}{\\hbox{\\char`\\?}}}% \\lccode`\\~`\\!\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\!}}{\\Wrappedafterbreak}{\\hbox{\\char`\\!}}}% \\lccode`\\~`\\/\\lowercase{\\def~}{\\discretionary{\\hbox{\\char`\\/}}{\\Wrappedafterbreak}{\\hbox{\\char`\\/}}}% \\catcode`\\.\\active \\catcode`\\,\\active \\catcode`\\;\\active \\catcode`\\:\\active \\catcode`\\?\\active \\catcode`\\!\\active \\catcode`\\/\\active \\lccode`\\~`\\~ } \\makeatother \\let\\OriginalVerbatim=\\Verbatim \\makeatletter \\renewcommand{\\Verbatim}[1][1]{% %\\parskip\\z@skip \\sbox\\Wrappedcontinuationbox {\\Wrappedcontinuationsymbol}% \\sbox\\Wrappedvisiblespacebox {\\FV@SetupFont\\Wrappedvisiblespace}% \\def\\FancyVerbFormatLine ##1{\\hsize\\linewidth \\vtop{\\raggedright\\hyphenpenalty\\z@\\exhyphenpenalty\\z@ \\doublehyphendemerits\\z@\\finalhyphendemerits\\z@ \\strut ##1\\strut}% }% % If the linebreak is at a space, the latter will be displayed as visible % space at end of first line, and a continuation symbol starts next line. % Stretch/shrink are however usually zero for typewriter font. \\def\\FV@Space {% \\nobreak\\hskip\\z@ plus\\fontdimen3\\font minus\\fontdimen4\\font \\discretionary{\\copy\\Wrappedvisiblespacebox}{\\Wrappedafterbreak} {\\kern\\fontdimen2\\font}% }% % Allow breaks at special characters using \\PYG... macros. \\Wrappedbreaksatspecials % Breaks at punctuation characters . , ; ? ! and / need catcode=\\active \\OriginalVerbatim[#1,codes*=\\Wrappedbreaksatpunct]% } \\makeatother % Exact colors from NB ((*- block style_colors *)) \\definecolor{incolor}{HTML}{303F9F} \\definecolor{outcolor}{HTML}{D84315} \\definecolor{cellborder}{HTML}{CFCFCF} \\definecolor{cellbackground}{HTML}{F7F7F7} ((*- endblock style_colors *)) % prompt \\makeatletter \\newcommand{\\boxspacing}{\\kern\\kvtcb@left@rule\\kern\\kvtcb@boxsep} \\makeatother ((*- block style_prompt *)) \\newcommand{\\prompt}[4]{ {\\ttfamily\\llap{{\\color{#2}\\hspace{3pt}#4}}} } ((* endblock style_prompt *)) ((*- endblock definitions -*)) %=============================================================================== % Input %=============================================================================== ((* block input scoped *)) % input hidden ((* endblock input *)) %=============================================================================== % Output %=============================================================================== ((*- if charlim is not defined -*)) ((* set charlim = 80 *)) ((*- endif -*)) ((* block execute_result scoped *)) ((*- for type in output.data | filter_data_type -*)) ((*- if type in [\u0026#39;text/plain\u0026#39;]*)) ((( draw_cell(output.data[\u0026#39;text/plain\u0026#39;] | wrap_text(charlim) | escape_latex | ansi2latex, cell, \u0026#39;Out\u0026#39;, \u0026#39;outcolor\u0026#39;, \u0026#39;\\\\boxspacing\u0026#39;) ))) ((* else -*)) ((( \u0026#34; \u0026#34; ))) ((( draw_prompt(cell, \u0026#39;Out\u0026#39;, \u0026#39;outcolor\u0026#39;,\u0026#39;\u0026#39;) )))((( super() ))) ((*- endif -*)) ((*- endfor -*)) ((* endblock execute_result *)) ((* block stream *)) \\begin{Verbatim}[commandchars=\\\\\\{\\}] ((( output.text | wrap_text(charlim) | escape_latex | strip_trailing_newline | ansi2latex ))) \\end{Verbatim} ((* endblock stream *)) %============================================================================== % Support Macros %============================================================================== % Name: draw_cell % Purpose: Renders an output/input prompt ((*- if draw_cell is not defined -*)) % Required to allow overriding. ((* macro draw_cell(text, cell, prompt, prompt_color, extra_space) -*)) ((*- if prompt == \u0026#39;In\u0026#39; -*)) ((*- set style = \u0026#34;breakable, size=fbox, boxrule=1pt, pad at break*=1mm,colback=cellbackground, colframe=cellborder\u0026#34;-*)) ((*- else -*))((*- set style = \u0026#34;breakable, size=fbox, boxrule=.5pt, pad at break*=1mm, opacityfill=0\u0026#34;-*))((*- endif -*)) \\begin{tcolorbox}[((( style )))] (((- draw_prompt(cell, prompt, prompt_color, extra_space) ))) \\begin{Verbatim}[commandchars=\\\\\\{\\}] ((( text ))) \\end{Verbatim} \\end{tcolorbox} ((*- endmacro *)) ((*- endif -*)) % Name: draw_prompt % Purpose: Renders an output/input prompt ((* macro draw_prompt(cell, prompt, prompt_color, extra_space) -*)) ((*- if cell.execution_count is defined -*)) ((*- set execution_count = \u0026#34;\u0026#34; ~ (cell.execution_count | replace(None, \u0026#34; \u0026#34;)) -*)) ((*- else -*))((*- set execution_count = \u0026#34; \u0026#34; -*))((*- endif *)) ((*- if (resources.global_content_filter.include_output_prompt and prompt == \u0026#39;Out\u0026#39;) or (resources.global_content_filter.include_input_prompt and prompt == \u0026#39;In\u0026#39; ) *)) \\prompt{(((prompt)))}{(((prompt_color)))}{(((execution_count)))}{(((extra_space)))} ((*- endif -*)) ((*- endmacro *)) ","date":"2025-06-13T12:29:01+08:00","permalink":"https://chenkeao.github.io/post/convert-ipynb-to-pdf-with-reporting-format/","title":"Convert IPynb to PDF With Reporting Format"},{"content":" exporting all selected notes with media references extract media paths from the exported file write a python script merging all selected audios into one ▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 import os import subprocess import pandas as pd from concurrent.futures import ThreadPoolExecutor, as_completed from tqdm import tqdm import random AUDIO_DIRECTORY = r\u0026#34;C:\\Users\\kyle\\AppData\\Roaming\\Anki2\\Eng\\collection.media\u0026#34; SILENT = r\u0026#34;C:\\Users\\momo\\Home\\Projects\\Anki\\silent.mp3\u0026#34; list_file_path = \u0026#34;../notes.txt\u0026#34; df = pd.read_csv( list_file_path, sep=\u0026#34;\\t\u0026#34;, header=None, names=[ \u0026#34;word\u0026#34;, \u0026#34;lemma\u0026#34;, \u0026#34;context\u0026#34;, \u0026#34;sentence\u0026#34;, \u0026#34;examples\u0026#34;, \u0026#34;symbol\u0026#34;, \u0026#34;voc\u0026#34;, \u0026#34;def\u0026#34;, \u0026#34;word_sound\u0026#34;, \u0026#34;sentence_sound\u0026#34; ], ) word_audio_names = df[\u0026#34;word_sound\u0026#34;].apply(lambda x: x.strip()[7:-1]).tolist() df[\u0026#34;sentence_sound\u0026#34;] = df[\u0026#34;sentence_sound\u0026#34;].fillna(\u0026#34;\u0026#34;) sentence_audio_names = df[\u0026#34;sentence_sound\u0026#34;].apply(lambda x: x.strip()[7:-1]).tolist() audio_paths = [os.path.join(AUDIO_DIRECTORY, item) for item in word_audio_names] + [ os.path.join(AUDIO_DIRECTORY, item) for item in sentence_audio_names if item != \u0026#34;\u0026#34; ] def normalize_audio(input_file, output_file): try: command = [ \u0026#34;ffmpeg\u0026#34;, \u0026#34;-loglevel\u0026#34;, \u0026#34;quiet\u0026#34;, \u0026#34;-y\u0026#34;, \u0026#34;-i\u0026#34;, input_file, \u0026#34;-ar\u0026#34;, \u0026#34;24000\u0026#34;, \u0026#34;-ab\u0026#34;, \u0026#34;96k\u0026#34;, output_file ] subprocess.run(command, check=True) return output_file except subprocess.CalledProcessError as e: return None def normalize_audio_multithreaded(file_list, output_dir, max_workers=16): if not os.path.exists(output_dir): os.makedirs(output_dir) print(\u0026#34;start normalizing audios\u0026#34;) with ThreadPoolExecutor(max_workers=max_workers) as executor: futures = [ executor.submit(normalize_audio, input_file, os.path.join(output_dir, os.path.basename(input_file))) for input_file in file_list ] for _ in tqdm(as_completed(futures), total=len(file_list)): pass else: print(\u0026#34;files has prepared well\u0026#34;) normalize_audio_multithreaded(audio_paths, \u0026#34;temp\u0026#34;) audio_paths = [(w, s) for w, s in zip(word_audio_names, sentence_audio_names)] random.shuffle(audio_paths) with open(\u0026#34;file_list.txt\u0026#34;, \u0026#34;w\u0026#34;) as f: for w, s in audio_paths: f.write(f\u0026#34;file \u0026#39;{os.path.join(\u0026#39;temp\u0026#39;, w)}\u0026#39;\\n\u0026#34;) f.write(f\u0026#34;file silent.mp3\\n\u0026#34;) f.write(f\u0026#34;file \u0026#39;{os.path.join(\u0026#39;temp\u0026#39;, w)}\u0026#39;\\n\u0026#34;) f.write(f\u0026#34;file silent.mp3\\n\u0026#34;) if s != \u0026#34;\u0026#34;: f.write(f\u0026#34;file \u0026#39;{os.path.join(\u0026#39;temp\u0026#39;, s)}\u0026#39;\\n\u0026#34;) f.write(f\u0026#34;file silent.mp3\\n\u0026#34;) f.write(f\u0026#34;file silent.mp3\\n\u0026#34;) command = [ \u0026#34;ffmpeg\u0026#34;, \u0026#34;-y\u0026#34;, \u0026#34;-f\u0026#34;, \u0026#34;concat\u0026#34;, \u0026#34;-safe\u0026#34;, \u0026#34;0\u0026#34;, \u0026#34;-i\u0026#34;, \u0026#34;file_list.txt\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;copy\u0026#34;, \u0026#34;output.mp3\u0026#34; ] subprocess.run(command, check=True) ","date":"2025-06-13T12:26:05+08:00","permalink":"https://chenkeao.github.io/post/merge-anki-audios/","title":"Merge Anki Audios"},{"content":"Introduction Dictionaries such as Oxford and Longman are used as the sources for the definitions in my flashcards. However, they sometimes contain too much unnecessary information, therefore making it unwieldy and grandiose, leading to a low loading speed and distractions. Since an MDX file utilizes the HTML format to save entries, which closely resembles the tree structure, I use the term \u0026ldquo;prune\u0026rdquo; to describe the course of removing branches, i.e. html nodes that contain superfluous elements. Each group of three lines in a mdx file constitutes an entry of a word where the first and the third lines are delimiters while the middle line is html content. Since typically MDX files are quite large, a division step is required for parallel processing. Thus, the breakdown procedures are as follows:\nsplit a gigantic mdx file into several small files. Note: the number of lines in each file must be a multiple of 3. process such files parallelly. merge files into one mdx file. Code ▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 import sys import os def split_file_by_lines(file_path): file_name, file_extension = os.path.splitext(file_path) lines_per_file = 28311 folder_path = \u0026#34;divided_files\u0026#34; if not os.path.exists(folder_path): os.makedirs(folder_path) else: raise BaseException(\u0026#34;directory exists\u0026#34;) with open(file_path, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: file_count = 0 lines = [] for line in f: lines.append(line) if len(lines) == lines_per_file: new_file_name = f\u0026#34;{file_name}_{file_count:02d}{file_extension}\u0026#34; with open( os.path.join(folder_path, new_file_name), \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34; ) as chunk_file: chunk_file.writelines(lines) lines = [] file_count += 1 if lines: new_file_name = f\u0026#34;{file_name}_{file_count}{file_extension}\u0026#34; with open( os.path.join(folder_path, new_file_name), \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34; ) as chunk_file: chunk_file.writelines(lines) file_count += 1 def merge_files(files, output_file=\u0026#34;res.txt\u0026#34;): with open(output_file, \u0026#34;w\u0026#34;) as f: pass for file in files: if os.path.isfile(file): with open(file, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: content = f.read() with open(output_file, \u0026#34;a\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(content) split_file_by_lines(\u0026#34;./mdx.txt\u0026#34;) os.system( r\u0026#39;ls ./divided_files | parallel -j16 \u0026#34;python3 ./prune.py ./divided_files/{} ./divided_files/new_{}\u0026#34;\u0026#39; ) merge_files([ os.path.join(\u0026#34;./divided_files\u0026#34;, f) for f in os.listdir(\u0026#34;./divided_files\u0026#34;) if os.path.isfile(os.path.join(\u0026#34;./divided_files\u0026#34;, f)) and f.startswith(\u0026#34;new\u0026#34;) ]) import shutil shutil.rmtree(\u0026#34;./divided_files\u0026#34;) detailed pruning code:\n▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #!/usr/bin/python import sys from bs4 import BeautifulSoup def remove_tags_with_class(html_content): soup = BeautifulSoup(html_content, features=\u0026#34;html.parser\u0026#34;) [tag.decompose() for tag in soup.find_all(\u0026#34;idm-gs-blk\u0026#34;)] [tag.decompose() for tag in soup.find_all(\u0026#34;pv-gs-blk\u0026#34;)] def_tags = soup.find_all(\u0026#34;def\u0026#34;) for def_tag in def_tags: xhtml_a_texts = [a_tag.unwrap() for a_tag in def_tag.find_all(\u0026#34;xhtml:a\u0026#34;)] [tag.decompose() for tag in def_tag.find_all(\u0026#34;chn\u0026#34;)] new_soup = BeautifulSoup( r\u0026#39;\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;, \u0026#34;html.parser\u0026#34;, ) for tag in def_tags: new_soup.body.append(tag) for def_tag in def_tags: new_tag = soup.new_tag(\u0026#34;p\u0026#34;) new_tag.string = def_tag.get_text().strip() def_tag.replace_with(new_tag) return str(new_soup) def process_html_file(input_file, output_file): with open(input_file, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: lines = file.readlines() with open(output_file, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as outfile: for line in lines: if line.strip().startswith(\u0026#34;\u0026lt;head\u0026gt;\u0026lt;link\u0026#34;): new_line = remove_tags_with_class(line) outfile.write(new_line + \u0026#34;\\n\u0026#34;) else: outfile.write(line) input_file = sys.argv[1] output_file = sys.argv[2] process_html_file(input_file, output_file) ","date":"2025-06-13T12:23:34+08:00","permalink":"https://chenkeao.github.io/post/prune-a-dictionary-file.mdx/","title":"Prune a Dictionary File(.mdx)"},{"content":"11\n","date":"2025-01-01T00:00:00Z","permalink":"https://chenkeao.github.io/post/deep-learning-1/","title":"Deep Learning 1"},{"content":" 此文全程处于linux环境，阅读此文需具备一些linux使用经验。\n解决饥荒卡顿有两个方法，如果你是单人联机玩家，可以添加长路独行模组，开启后就可以获得与单机版相同的游戏体验，此模组的原理的注意事项可以点此查看。 对于联机玩家，可以搭建专用服务器优化卡顿。饥荒联机版专用服务器 (Don\u0026rsquo;t Starve Together Dedicated Server) 是由 klei 官方提供的一个工具，购买饥荒联机版后，在Steam 的“库”页面勾选 \u0026ldquo;TOOLS\u0026rdquo; 后就可以看到了。 专用服务器可以在云服务器或PC上运行。如果你的电脑配置还可以，并且不要求服务器全天运行，完全可以在自己电脑上搭建专用服务器。 运行专用服务器每个世界大约需要1G内存，同时运行游戏本身也需要内存，因此内存最好在8G以上。如图1所示，第一个进程是游戏本身，占用了1.2G的内存，第二个进程是专用服务器，占用了995M左右的内存。\n饥荒存档的构成 使用游戏本身创建的存档最多可以有一个森林和一个洞穴。但是饥荒专用服务器支持一个存档内包含任意多个森林和洞穴。\n专用服务器的运行单位是一个世界，而不是一个存档。比如说，一个存档中包括2个森林和2个洞穴，那么就需要启动4个专用服务器的进程实例。当然，你也可以不运行全部的世界，如果你不打算去某个世界，完全可以不启动它。这些进程通过网络通信，由于这种灵活的方式，你完全可以将一个存档中的不同的世界运行在不同的电脑上 (当然一般不需要这么做，除非你的世界太大了以至于一台电脑运行起来吃力)。\n唯一的限制是，每个存档必须有且仅有一个主世界 (Master Shard)，所有其他的世界都需要绑定到主世界。为了区分，每个世界都有一个唯一的id，通过给洞穴入口或洞穴出口绑定不同的id，玩家就可以通过他们在多个世界之间穿越。旺达的溯源表也绑定了世界的id，因此可以穿越到不同的世界。如图2所示，这是一个拥有两个森林和两个洞穴的世界。其中一个森林是主世界，箭头代表可以通过洞穴入口或洞穴出口进出另一个世界。\n这个世界对应的存档结构如下:\n▼ 1 2 3 4 5 6 7 . ├── [drwxr-xr-x] Master ├── [drwxr-xr-x] Cave1 ├── [drwxr-xr-x] Cave2 ├── [drwxr-xr-x] Forest1 ├── [-rw-r--r--] cluster.ini └── [-rw-r--r--] cluster_token.txt 可以看出，每个世界都对应一个文件夹。此外，cluster.ini存放了世界的一些参数设置，cluster_token.txt里存放了用户的身份令牌 (身份令牌的获取参见下一章)。这些就是一个 存档的完整内容。 也可以去查看~/.klei/DontStarveTogether/$SteamUserID/目录，如果你在本地创建了存档，那么这个目录下就会有以Cluster_X格式命名的文件夹，其中X是此存档在游戏中显示的位置。如图3所示，我创建了一个存档，那么此文件夹中就有一个Cluster_1。\n查看目录结构，可以看出我只添加了一个主世界，没有添加洞穴。由于只有在专用服务器上运行的存档才需要cluster_token.txt，因此这里没有。\n▼ 1 2 3 4 5 ```bash Cluster_1 ├── Master └── cluster.ini 在本地运行专用服务器 准备存档文件 在游戏中创建存档，添加好要启用的模组并设置好世界的参数后生成世界。等待世界生成，进入选人物的步骤后，断开连接。\n一定要添加洞穴，否则存档无法在专用服务器中运行。\n进入~/.klei/DontStarveTogether/$SteamUserID/目录，将刚刚创建的存档Cluster_X(X是此存档在游戏中显示的位置)移动到~/.klei/DontStarveTogether/中。\n▼ 1 2 cd ~/.klei/DontStarveTogether/$SteamUserID/ mv Cluster_X .. 使用浏览器打开Klei Account，登录自己的Klei账号，可以使用Steam登录。登录成功后进入如下页面。\n点击导航栏中的游戏，在游戏列表中点击《饥荒：联机版》的游戏服务器，如下图所示。\n随便起一个名字，点击添加新服务器，然后复制生成的以pds-g^开头的代码，如下图所示。\n在~/.klei/DontStarveTogether/Cluster_X中创建cluster_token.txt文件，内容为刚刚复制的代码。\n▼ 1 echo \u0026#34;pds-g^...\u0026#34; \u0026gt; cluster_token.txt 至此，存档文件就准备好了。\n准备专用服务器和模组 在Steam中安装Don't Starve Together Dedicated Server，进入安装目录 (安装目录可以在Steam的游戏设置中找到)。 如果你的存档添加了模组，则需要修改mods文件夹下的dedicated_server_mods_setup.lua文件。专用服务器启动时，会根据这个文件的内容自动更新模组，如果你只在存档中添加了模组但是没有修改这个文件，则模组会添加失败。将需要添加的模组的id以如下这种格式添加到此文件中即可。\n▼ 1 2 3 ServerModSetup(\u0026#34;1438233888\u0026#34;) --多层世界选择器 ServerModSetup(\u0026#34;1418746242\u0026#34;) --汉化增强 Chinese++ ServerModSetup(\u0026#34;666155465\u0026#34;) --show me 模组的id可以通过Steam创意工坊中的链接查看。在Steam中模组的详情页面右击空白处，选择Copy Page URL。链接末尾的?id=后接的就是它的id。例如Show Me的创意工坊链接为https://steamcommunity.com/sharedfiles/filedetails/?id=666155465，其id为666155465。 除了这种方式，还可以查看此存档中主世界目录中的modoverrides.lua文件，这个文件保存了当前世界启用的模组的设置。格式如下所示，其中workshop-后接的数字就是模组的id。\n▼ 1 2 3 4 5 6 7 8 9 return{ [\u0026#34;workshop-1418746242\u0026#34;]={ [\u0026#34;configuration_options\u0026#34;]={ [\u0026#34;clearfont\u0026#34;]=true， [\u0026#34;eventplus\u0026#34;]=true， [\u0026#34;extratrans\u0026#34;]=true }, [\u0026#34;enabled\u0026#34;]=true } } 既然modoverrides.lua文件已经保存了模组的id，那么我们就可以使用脚本将所有添加的模组的id提取出来。如下命令会根据modoverrides.lua文件自动生成dedicated_server_mods_setup.lua文件。cd到modoverrides.lua所在目录中执行如下命令，然后将生成的文件复制到专用服务器安装目录/mods文件夹覆盖原有文件即可。\n▼ 1 cat ./modoverrides.lua | grep -E \u0026#39;\\[\u0026#34;workshop-[0-9]+\u0026#34;\\].*\u0026#39; | sed -r \u0026#39;s/\\[\u0026#34;workshop-([0-9]+)\u0026#34;\\].*/ServerModSetup(\u0026#34;\\1\u0026#34;)/g\u0026#39; \u0026gt; dedicated_server_mods_setup.lua 启动专用服务器 cd到安装目录中的bin64文件夹，执行\n▼ 1 2 ./dontstarve_dedicated_server_nullrenderer_x64 -console -cluster \u0026#34;Cluster_X\u0026#34; -monitor_parent_process $$ -shard Caves \u0026amp; ./dontstarve_dedicated_server_nullrenderer_x64 -console -cluster \u0026#34;Cluster_X\u0026#34; -monitor_parent_process $$ -shard Master -console指定在游戏中启用控制台。 -cluster指定存档的名字，这个名字和要运行的存档文件夹名对应。 -shard指定世界碎片的名字。同样，这个名字也要和世界碎片的文件夹名对应。\n在cluster.ini中也可以指定一个名称，这个名称是在游戏中玩家看的世界名称。而-cluster指定的只是文件夹的名称，在游戏中是看不到的。\n在云服务器运行专用服务器 购买阿里云或腾讯云提供的云服务器，配置选择1核2G或者2核4G即可。安装Debian或Ubuntu操作系统，在安全组中开放10888-10999端口。此处以Debian为例。\n▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 _,met$$$$$gg. momo@debian ,g$$$$$$$$$$$$$$$P. ----------- ,g$$P\u0026#34; \u0026#34;\u0026#34;\u0026#34;Y$$.\u0026#34;. OS: Debian GNU/Linux 11 (bullseye) x86_64 ,$$P\u0026#39; `$$$. Host: VirtualBox 1.2 \u0026#39;,$$P ,ggs. `$$b: Kernel: 5.10.0-23-amd64 `d$$\u0026#39; ,$P\u0026#34;\u0026#39; . $$$ Uptime: 1 min $$P d$\u0026#39; ， $$P Packages: 444 (dpkg) $$: $$. - ,d$$\u0026#39; Shell: bash 5.1.4 $$; Y$b._ _,d$P\u0026#39; Resolution: preferred Y$$. `.`\u0026#34;Y$$$$P\u0026#34;\u0026#39; Terminal: /dev/pts/0 `$$b \u0026#34;-.__ CPU: Intel i5-7300HQ (2) @ 2.496GHz `Y$$ GPU: 00:02.0 VMware SVGA II Adapter `Y$$. Memory: 78MiB / 3919MiB `$$b. `Y$$b. `\u0026#34;Y$b._ `\u0026#34;\u0026#34;\u0026#34; 添加32位支持 ▼ 1 2 sudo dpkg --add-architecture i386 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y 安装依赖 ▼ 1 sudo apt install libstdc++6:i386 libgcc1:i386 libcurl4-gnutls-dev:i386 -y 安装SteamCMD ▼ 1 2 3 4 5 # 这一步的速度视网络环境而定 mkdir -p ~/steamcmd/ cd ~/steamcmd/ wget \u0026#34;https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\u0026#34; tar -xvzf steamcmd_linux.tar.gz 准备存档文件 这一步骤与上一章中的相同，可以在本地生成存档文件夹，然后上传到服务器。 ▼ 1 2 3 4 5 6 # 在服务器 mkdir -p ~/.klei/DoNotStarveTogether # 在本地 cd ~/.klei/DoNotStarveTogether scp -r ./Cluster_X username@xxx.xxx.xxx.xxx:~/.klei/DoNotStarveTogether/ 将以下内容写入run_server.sh文件并赋予其执行权限。 ▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #!/bin/bash steamcmd_dir=\u0026#34;$HOME/steamcmd\u0026#34; install_dir=\u0026#34;$HOME/dontstarvetogether_dedicated_server\u0026#34; cluster_name=\u0026#34;$1\u0026#34; dontstarve_dir=\u0026#34;$HOME/.klei/DoNotStarveTogether\u0026#34; function fail() { echo Error: \u0026#34;$@\u0026#34; \u0026gt;\u0026amp;2 exit 1 } function check_for_file() { if [ ! -e \u0026#34;$1\u0026#34; ]; then fail \u0026#34;Missing file: $1\u0026#34; fi } cd \u0026#34;$steamcmd_dir\u0026#34; || fail \u0026#34;Missing $steamcmd_dir directory!\u0026#34; check_for_file \u0026#34;steamcmd.sh\u0026#34; check_for_file \u0026#34;$dontstarve_dir/$cluster_name/cluster.ini\u0026#34; check_for_file \u0026#34;$dontstarve_dir/$cluster_name/cluster_token.txt\u0026#34; check_for_file \u0026#34;$dontstarve_dir/$cluster_name/Master/server.ini\u0026#34; check_for_file \u0026#34;$dontstarve_dir/$cluster_name/Caves/server.ini\u0026#34; ./steamcmd.sh +force_install_dir \u0026#34;$install_dir\u0026#34; +login anonymous +app_update 343050 validate +quit check_for_file \u0026#34;$install_dir/bin64\u0026#34; cat \u0026#34;$dontstarve_dir/$cluster_name/Master/modoverrides.lua\u0026#34; | grep -E \u0026#39;\\[\u0026#34;workshop-[0-9]+\u0026#34;\\].*\u0026#39; | sed -r \u0026#39;s/\\[\u0026#34;workshop-([0-9]+)\u0026#34;\\].*/ServerModSetup(\u0026#34;\\1\u0026#34;)/g\u0026#39; \u0026gt; \u0026#34;$install_dir/mods/dedicated_server_mods_setup.lua\u0026#34; cd \u0026#34;$install_dir/bin64\u0026#34; || fail run_shared=(./dontstarve_dedicated_server_nullrenderer_x64) run_shared+=(-console) run_shared+=(-cluster \u0026#34;$cluster_name\u0026#34;) run_shared+=(-monitor_parent_process $$) \u0026#34;${run_shared[@]}\u0026#34; -shard Caves | sed \u0026#39;s/^/Caves: /\u0026#39; \u0026amp; \u0026#34;${run_shared[@]}\u0026#34; -shard Master | sed \u0026#39;s/^/Master: /\u0026#39; 这个脚本是我在Klei官方提供的脚本的基础上优化修改而来。运行时需要提供存档文件夹的名称作为脚本的第一个参数。脚本将会检查存档文件是否完整，使用SteamCMD更新专用服务器并根据存档的模组设置文件modoverrides.lua自动生成dedicated_server_mods_setup.lua文件。\n运行脚本 ▼ 1 ./run_server.sh Cluster_X 由于第一次运行时要下载专用服务器，速度会比较慢。当终端输出Sim paused时就说明启动完毕，可以在游戏中搜索加入了。\n可以使用tmux或screen等工具，这样脚本就可以在后台运行了。\n多层世界 理论上来说，一个存档中可以添加无数个世界。配置多层世界需要修改存档根目录中的cluster.ini和每个世界目录中的server.ini。 首先看一下的cluster.ini的内容。\nTODO 文件内容分析\n使用多层世界选择器可以解决给洞穴入口绑定id的麻烦。类似于路由器的工作方式，玩家选择目标世界，由多层世界选择器将玩家送到对应世界，如图7所示。\n常见问题 Connecting anonymously to Steam Public\u0026hellip;: Retry Retry 无法连接到Steam的服务器，这一般是由于GFW，科学上网即可解决。\n服务器启动失败: cluster_token.txt do not exist 检查cluster_token.txt是否存在，内容是否正确。\n服务器启动失败: libcurl-gnults.so.4 安装libcurl-gnults。\n全部模组没有添加成功 查看modoverrides.lua和dedicated_server_mods_setup.lua是否都存在，内容是否正确。\n部分模组没有添加成功 因为网络原因，有时专用服务器会在下载某些模组时失败。如果运行后发现只有一部分模组，一般重新运行专用服务器即可。\n游戏大厅内无法搜索到世界 可以通过控制台指令c_connect(\u0026quot;xxx.xxx.xxx.xxx\u0026quot;，10999，\u0026quot;password\u0026quot;)加入世界，其中第一个参数是服务器的IP地址，第二个参数是主世界碎片的端口号，第三个参数是世界的密码。\n","date":"2023-06-09T00:00:00Z","image":"https://chenkeao.github.io/post/dst-dedicated-server-multilevel-world-setup-guide/1_hu_cc5ae36849b81394.png","permalink":"https://chenkeao.github.io/post/dst-dedicated-server-multilevel-world-setup-guide/","title":"饥荒联机版专用服务器和多层世界配置指南"},{"content":"Android QQ 的图片文件是以下面这种结构保存的，以Cache_开头的文件就是图片。这种结构在浏览时要分别点进每个文件夹才能看到图片，很不方便。\n▼ 1 2 3 4 5 6 7 8 9 ├── 0a0 │ ├── Cache_2783644ca99260a0 │ └── Cache_-4dfb57e9a7cec0a0 ├── 0a6 │ ├── Cache_373e35b7b8a290a6 │ ├── Cache_-489f6e9c62ea10a6 │ └── Cache_57776dc1e17110a6 └── 0a7 └── Cache_25d732f84bd7d0a7 使用 GNU Parallel 配合mv可以快速的 “解散” 每个二级文件夹，变成以下这种结构。\n▼ 1 2 3 4 5 6 7 . ├── Cache_25d732f84bd7d0a7 ├── Cache_2783644ca99260a0 ├── Cache_373e35b7b8a290a6 ├── Cache_-489f6e9c62ea10a6 ├── Cache_-4dfb57e9a7cec0a0 └── Cache_57776dc1e17110a6 命令如下:\n▼ 1 find . -name \u0026#34;*\u0026#34; -type f -print | parallel mv {} ./{/} 参考: https://www.myfreax.com/gnu-parallel/\n","date":"2023-06-08T00:00:00Z","permalink":"https://chenkeao.github.io/post/gnu-parallel-tips/","title":"GNU Parallel 的妙用"},{"content":"shell脚本是处理这类工作最为简单，快捷的方式。\n修改后缀 ▼ 1 for file in *.原后缀; do mv \u0026#34;$file\u0026#34; \u0026#34;`echo $file | sed s/.原后缀/.新后缀/`\u0026#34;; done 格式转换 heic 转 jpg 首先，安装转换工具。\n▼ 1 yay -S libheif 然后可以使用heif-convert命令转换。\n▼ 1 heif-convert input.heic output.jpg 批量转换，命令如下。\n▼ 1 for file in *.heic; do heif-convert \u0026#34;$file\u0026#34; ${file/%.heic/.jpg} \u0026amp;\u0026amp; rm \u0026#34;$file\u0026#34;; done 这条命令的原理是：根据当前文件夹下的.heic文件生成.jpg文件，如果成功生成则删除原.heic文件，如果未成功则不会删除原文件。 此外，如果未能生成.jpg文件的原因是Input file 'filename.heic' is a JPEG image，那么可以使用批量修改后缀的方法直接将文件的后缀改为.jpg。\nflac 转 mp3 首先，安装转换工具：\n▼ 1 yay -S ffmpeg 然后可以使用ffmpeg命令转换，除了格式转换，ffmpeg还支持很多功能，具体可以查阅文档。\n▼ 1 ffmpeg -i \u0026#39;input.flac\u0026#39; -ab 320k -map_metadata 0 -id3v2_version 3 \u0026#39;output.mp3\u0026#39; 批量转换，命令如下：\n▼ 1 for file in *.flac; do ffmpeg -i \u0026#34;$file\u0026#34; -ab 320k -map_metadata 0 -id3v2_version 3 ${file/%.flac/.mp3} \u0026amp;\u0026amp; rm \u0026#34;$file\u0026#34;; done 原理同上。\n速度优化 使用for循环的方式，所有文件排着队一个一个的被ffmpeg处理。 这种方式固然可以，但效率太低了。 我的运行环境如下:\n▼ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 -` momo@momo-arch .o+` -------------- `ooo/ OS: Arch Linux x86_64 `+oooo: Host: 81AC Lenovo ideapad 720S-15IKB `+oooooo: Kernel: 6.3.6-arch1-1 -+oooooo+: Uptime: 6 hours, 59 mins `/:-:++oooo+: Packages: 975 (pacman), 8 (flatpak) `/++++/+++++++: Shell: bash 5.1.16 `/++++++++++++++: Resolution: 1920x1080 `/+++ooooooooooooo/` DE: Plasma 5.27.5 ./ooosssso++osssssso+` WM: kwin .oossssso-````/ossssss+` Theme: [Plasma], Layan-Light-Solid [GTK2/3] -osssssso. :ssssssso. Icons: Papirus [Plasma], Papirus [GTK2/3] :osssssss/ osssso+++. Terminal: konsole /ossssssss/ +ssssooo/- CPU: Intel i5-7300HQ (4) @ 3.500GHz `/ossssso+/:- -:/+osssso+- GPU: Intel HD Graphics 630 `+sso+:-` `.-/+oso: Memory: 7216MiB / 19554MiB `++:. `-/+/ .` `/ 经过测试，处理10个.flac文件所需时间为59秒。 速度慢的原因是目前使用的是单进程串行的处理方式，为了提高速度，可以同时启动多个进程并行处理。\n使用终端工具GNU Parallel，命令如下：\n▼ 1 ls *.flac | parallel -j4 \u0026#34;ffmpeg -i {} -ab 320k -map_metadata 0 -id3v2_version 3 {.}.mp3 \u0026amp;\u0026amp; rm {}\u0026#34; parallel将从标准输入中读取文件列表，-j指定了并行进程数，{}代表输入文件名，{.}代表没有后缀的输入文件名，其他用法可以man parallel查看。\n经过测试，在同样环境下处理同样的.flac文件仅需17秒。\n","date":"2023-06-06T00:00:00Z","permalink":"https://chenkeao.github.io/post/batch-rename-file-extensions-and-format-conversion-in-linux/","title":"使用 Shell 批量修改文件后缀和批量格式转换"}]